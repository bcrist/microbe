step: Step,
output_file: GeneratedFile,
chip: Chip,
sections: []Section,

pub fn create(owner: *Build, chip: Chip, sections: []const Section) *Linker_Script_Step {
    var self = owner.allocator.create(Linker_Script_Step) catch @panic("OOM");
    self.* = Linker_Script_Step{
        .step = Step.init(.{
            .id = .custom,
            .name = "linkerscript",
            .owner = owner,
            .makeFn = make,
        }),
        .output_file = .{
            .step = &self.step,
        },
        .chip = chip,
        .sections = owner.allocator.dupe(Section, sections) catch @panic("OOM"),
    };
    return self;
}

pub fn get_output(self: *const Linker_Script_Step) std.Build.LazyPath {
    return .{ .generated = &self.output_file };
}

fn find_memory_region_index(region_name: []const u8, chip: Chip) !usize {
    for (chip.memory_regions, 0..) |region, i| {
        if (std.mem.eql(u8, region_name, region.name)) {
            return i;
        }
    }
    std.log.err("chip {s} does not have a memory region named {any}", .{ chip.name, region_name });
    return error.Missing_Memory_Region;
}

fn find_memory_region_index_by_address(address: u32, chip: Chip) !usize {
    for (chip.memory_regions, 0..) |region, i| {
        if (address >= region.offset and address < region.offset + region.length) {
            return i;
        }
    }
    std.log.err("chip {s} does not have a memory region containing address 0x{X}", .{ chip.name, address });
    return error.Missing_Memory_Region;
}

fn make(step: *Step, progress: *std.Progress.Node) !void {
    _ = progress;

    const b = step.owner;
    const self = @fieldParentPtr(Linker_Script_Step, "step", step);
    const chip = self.chip;
    const target = chip.core.target;

    var man = b.cache.obtain();
    defer man.deinit();

    // Random bytes to make hash unique. Change this if linker script implementation is modified.
    man.hash.add(@as(u32, 0x36e1_27bc));

    hash.add_chip_and_sections(&man.hash, chip, self.sections);

    if (try step.cacheHit(&man)) {
        // Cache hit, skip subprocess execution.
        const digest = man.final();
        self.output_file.path = try b.cache_root.join(b.allocator, &.{
            "microbe",
            &digest,
            "link.ld",
        });
        return;
    }

    const digest = man.final();
    self.output_file.path = try b.cache_root.join(b.allocator, &.{
        "microbe",
        &digest,
        "link.ld",
    });
    const cache_dir = "microbe" ++ std.fs.path.sep_str ++ digest;
    b.cache_root.handle.makePath(cache_dir) catch |err| {
        return step.fail("unable to make path {s}: {s}", .{ cache_dir, @errorName(err) });
    };

    if (target.cpu_arch == null) {
        std.log.err("target does not have 'cpu_arch'", .{});
        return error.No_CPU_Arch;
    }

    var contents = std.ArrayList(u8).init(b.allocator);
    defer contents.deinit();

    const writer = contents.writer();

    try writer.print(
        \\/*
        \\ * This file was auto-generated by microbe
        \\ *
        \\ * Target CPU:  {s}
        \\ * Target Chip: {s}
        \\ */
        \\ENTRY(_boot2);
        \\
        \\MEMORY
        \\{{
        \\
    , .{ chip.core.name, chip.name });

    for (chip.memory_regions) |region| {
        try writer.print("  {s} (", .{ region.name });
        if (region.access.contains(.readable)) try writer.writeAll("r");
        if (region.access.contains(.writable)) try writer.writeAll("w");
        if (region.access.contains(.executable)) try writer.writeAll("x");
        try writer.print(") : ORIGIN = 0x{X:0>8}, LENGTH = 0x{X:0>8}\n", .{ region.offset, region.length });
    }

    var final_sections = try b.allocator.alloc(?usize, chip.memory_regions.len);
    @memset(final_sections, null);

    for (self.sections, 0..) |section, i| {
        if (section.ram_region) |ram| {
            const r = try find_memory_region_index(ram, chip);
            final_sections[r] = i;
            if (section.rom_region) |rom| {
                // just make sure the rom region exists
                _ = try find_memory_region_index(rom, chip);
            } else if (section.rom_address) |addr| {
                // just make sure the rom region exists
                _ = try find_memory_region_index_by_address(addr, chip);
            }
        } else if (section.ram_address) |ram_addr| {
            const r = try find_memory_region_index_by_address(ram_addr, chip);
            final_sections[r] = i;
            if (section.rom_region) |rom| {
                // just make sure the rom region exists
                _ = try find_memory_region_index(rom, chip);
            } else if (section.rom_address) |addr| {
                // just make sure the rom region exists
                _ = try find_memory_region_index_by_address(addr, chip);
            }
        } else if (section.rom_region) |rom| {
            const r = try find_memory_region_index(rom, chip);
            final_sections[r] = i;
        } else if (section.rom_address) |rom_addr| {
            const r = try find_memory_region_index_by_address(rom_addr, chip);
            final_sections[r] = i;
        }
    }

    try writer.writeAll(
        \\}
        \\
        \\SECTIONS
        \\{
        \\
    );

    for (self.sections, 0..) |section, section_index| {
        const has_rom_assignment = section.rom_region != null or section.rom_address != null;
        const has_ram_assignment = section.ram_region != null or section.ram_address != null;

        if (has_ram_assignment) {
            const r = if (section.ram_region) |region| try find_memory_region_index(region, chip) else try find_memory_region_index_by_address(section.ram_address.?, chip);
            const is_final_section = final_sections[r] == section_index;
            if (has_rom_assignment) {
                try write_section_load(writer, section, is_final_section);
            } else {
                try write_section_ram(writer, section, is_final_section);
            }
        } else if (has_rom_assignment) {
            const r = if (section.rom_region) |region| try find_memory_region_index(region, chip) else try find_memory_region_index_by_address(section.rom_address.?, chip);
            const is_final_section = final_sections[r] == section_index;
            try write_section_rom(writer, section, is_final_section);
        } else {
            std.log.err("Section {s} must be assigned to a ROM or RAM memory range, or both!", .{ section.name });
            return error.InvalidSection;
        }
    }

    try writer.writeAll(
        \\}
        \\
    );

    for (chip.memory_regions, 0..) |region, region_index| {
        if (final_sections[region_index]) |section_index| {
            const section = self.sections[section_index];
            try writer.print(
                \\_{s}_end = ORIGIN({s}) + LENGTH({s});
                \\
            , .{ section.name, region.name, region.name });
        }
    }

    var file = try b.cache_root.handle.createFile(self.output_file.getPath(), .{});
    defer file.close();

    try file.writeAll(contents.items);
    try man.writeManifest();
}

fn write_section_ram(writer: anytype, section: Section, is_final_section: bool) !void {
    try writer.print("  .{s}", .{ section.name });
    if (section.ram_address) |addr| {
        try writer.print(" 0x{X}", .{ addr });
    }
    try writer.writeAll(" (NOLOAD) : {\n");
    try write_section_contents(writer, section, is_final_section);
    try writer.writeAll("  }");
    if (section.ram_region) |region| {
        try writer.print(" > {s}", .{ region });
    }
    try writer.writeAll("\n\n");
}

fn write_section_rom(writer: anytype, section: Section, is_final_section: bool) !void {
    try writer.print("  .{s}", .{ section.name });
    if (section.rom_address) |addr| {
        try writer.print(" 0x{X}", .{ addr });
    }
    try writer.writeAll(" : {\n");
    try write_section_contents(writer, section, is_final_section);
    try writer.writeAll("  }");
    if (section.rom_region) |region| {
        try writer.print(" > {s}", .{ region });
    }
    try writer.writeAll("\n\n");
}

fn write_section_load(writer: anytype, section: Section, is_final_section: bool) !void {
    try writer.print("  .{s}", .{ section.name });
    if (section.ram_address) |addr| {
        try writer.print(" 0x{X}", .{ addr });
    }
    try writer.writeAll(" :");
    if (section.rom_address) |addr| {
        try writer.print(" AT(0x{X})", .{ addr });
    }
    try writer.writeAll(" {\n");
    try write_section_contents(writer, section, is_final_section);
    try writer.writeAll(" }");
    if (section.ram_region) |region| {
        try writer.print(" > {s}", .{ region });
    }
    if (section.rom_region) |region| {
        try writer.print(" AT > {s}", .{ region });
    }
    try writer.print(
        \\
        \\  _{s}_load = LOADADDR(.{s});
        \\
        \\
    , .{ section.name, section.name });
}

fn write_section_contents(writer: anytype, section: Section, is_final_section: bool) !void {
    var buf: [64]u8 = undefined;
    const clean_name = try std.fmt.bufPrint(&buf, "{s}", .{ section.name });
    for (clean_name) |*c| {
        switch (c.*) {
            'a'...'z', 'A'...'Z', '0'...'9' => {},
            else => {
                c.* = '_';
            },
        }
    }
    if (section.start_alignment_bytes) |alignment| {
        try writer.print(
            \\    . = ALIGN({});
            \\
        , .{ alignment });
    }
    try writer.print(
        \\    _{s}_start = .;
        \\
    , .{ clean_name });
    for (section.contents) |entry| {
        try writer.print(
            \\    {s}
            \\
        , .{ entry });
    }
    if (section.end_alignment_bytes) |alignment| {
        try writer.print(
            \\    . = ALIGN({});
            \\
        , .{ alignment });
    }
    if (is_final_section) {
        try writer.print(
            \\    _{s}_min = .;
            \\
        , .{ clean_name });
    } else {
        try writer.print(
            \\    _{s}_end = .;
            \\
        , .{ clean_name });
    }
}

const Linker_Script_Step = @This();
const Section = @import("Section.zig");
const Chip = @import("Chip.zig");
const hash = @import("hash.zig");
const GeneratedFile = Build.GeneratedFile;
const Step = Build.Step;
const Build = std.Build;
const std = @import("std");
